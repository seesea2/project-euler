//Highly divisible triangular number
/*
The sequence of triangle_data numbers is generated by adding the natural numbers. 
So the 7th triangle_data number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle_data numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle_data number to have over five divisors.

What is the value of the first triangle_data number to have over five hundred divisors?
*/


#include "../header.h"
#include "../math_functions.h"

void Problem12()
{
	double triangular_num, test_divisior, temp;
	int i, divisor_qty;

	const int REQUIRED_DIVISIOR = 500;


	triangular_num = 0;
	i = 0;
	do
	{
		triangular_num += ++i;

		divisor_qty = 0, test_divisior = triangular_num;
		while(test_divisior > 0)
		{
			temp = GetMaxFactorWithBoundary(triangular_num, test_divisior);
			++divisor_qty;
			test_divisior = temp - 1;
		}

		if(divisor_qty > REQUIRED_DIVISIOR)
			break;
	}while(1);

	cout << "First triangle_data over five hundred divisors : " << triangular_num << endl;
}